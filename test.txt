#line 1 "bitmap.c"
#line 1 "../include/winix/kernel.h"









#line 1 "../include/sys/ipc.h"

#line 8 "../include/sys/ipc.h"




#line 1 "../include/signal.h"




#line 1 "../include/sys/types.h"



typedef unsigned long size_t;
typedef unsigned char byte;
typedef unsigned char byte_t;
typedef unsigned long uint32_t;
typedef unsigned long clock_t;
typedef unsigned long mode_t;
typedef unsigned int uid_t;
typedef unsigned int gid_t;
typedef unsigned long off_t;
typedef unsigned long time_t;
typedef unsigned int nlink_t;
typedef int pid_t;


#line 6 "../include/signal.h"


typedef int sig_atomic_t;




typedef unsigned long sigset_t;


























typedef void (*sighandler_t)(int);









struct sigaction {

  sighandler_t sa_handler;
  sigset_t sa_mask;
  int sa_flags;
};



void (*signal(int sig, void (*func)(int)))(int);


#line 13 "../include/sys/ipc.h"

typedef struct {int m1i1, m1i2, m1i3; void *m1p1, *m1p2, *m1p3;} mess_1;
typedef struct {int m2i1, m2i2, m2i3; long m2l1;unsigned long m2ul1; void *m2p1; short m2s1;} mess_2;

#line 19 "../include/sys/ipc.h"
typedef struct {
	int src;
	int type;
	int i1, i2, i3;
	void *p1, *p2, *p3;
	sighandler_t s1;
} message_t;





#line 33 "../include/sys/ipc.h"






#line 41 "../include/sys/ipc.h"




#line 47 "../include/sys/ipc.h"
int winix_send(int dest, message_t *m);
int winix_notify(int dest, message_t *m);


#line 53 "../include/sys/ipc.h"
int winix_receive(message_t *m);


#line 60 "../include/sys/ipc.h"
int winix_sendrec(int dest, message_t *m);


#line 11 "../include/winix/kernel.h"
#line 1 "../include/sys/types.h"

















#line 12 "../include/winix/kernel.h"
#line 1 "../include/sys/syscall.h"

#line 8 "../include/sys/syscall.h"





#line 15 "../include/sys/syscall.h"






























#line 54 "../include/sys/syscall.h"



#line 58 "../include/sys/syscall.h"





#line 64 "../include/sys/syscall.h"



#line 69 "../include/sys/syscall.h"
int sys_uptime();


#line 74 "../include/sys/syscall.h"
int sys_exit(int status);
int sys_process_overview();

void *sbrk(unsigned long size);

int getc();
int putc(int i);
int printf(const char *format, ...);


#line 13 "../include/winix/kernel.h"
#line 1 "../include/stddef.h"

#line 8 "../include/stddef.h"







#line 14 "../include/winix/kernel.h"
#line 1 "../include/util.h"



const char *size_t_to_binary(unsigned long x);
int hex2int(char *a, int len);


#line 15 "../include/winix/kernel.h"
#line 1 "../include/const.h"











#line 16 "../include/winix/kernel.h"
#line 1 "../include/errno.h"

#line 19 "../include/errno.h"











extern int __errno;









































































#line 106 "../include/errno.h"











#line 17 "../include/winix/kernel.h"
#line 1 "../include/stdbool.h"



typedef int	bool;




#line 18 "../include/winix/kernel.h"
#line 1 "../include/signal.h"





























































#line 19 "../include/winix/kernel.h"
#line 1 "../include/stdbool.h"








#line 20 "../include/winix/kernel.h"
#line 1 "../include/curses.h"













#line 21 "../include/winix/kernel.h"

#line 1 "../include/winix/type.h"



typedef unsigned int reg_t;
typedef unsigned int* ptr_t;


#line 23 "../include/winix/kernel.h"
#line 1 "../include/winix/comm.h"







#line 24 "../include/winix/kernel.h"
#line 1 "../include/winix/kdebug.h"



extern int DEBUG_SCHED;
extern int DEBUG_IPC;


#line 25 "../include/winix/kernel.h"
#line 1 "../include/winix/bitmap.h"





typedef struct pattern_b{
    unsigned int pattern;
    int size;
}pattern_t;

extern unsigned int mask[32];

void init_bitmap();
void bitmap_clear(unsigned int *map, int map_len);
void bitmap_fill(unsigned int *map, int map_len);

int bitmap_search(unsigned int *map, int map_len, int num);
int bitmap_search_reverse(unsigned int *map, int map_len, int num);
void bitmap_set_bit(unsigned int *map, int map_len,int start);
void bitmap_set_nbits(unsigned int *map, int map_len,int start, int len);
void bitmap_reset_bit(unsigned int *map, int map_len,int start);
void bitmap_reset_nbits(unsigned int *map, int map_len,int start, int len);
void bitmap_xor(unsigned int *map1, unsigned int *map2, int size_len);


int bitmap_search_pattern(unsigned int *map, int map_len, int start,unsigned int pattern, int pattern_len);
void bitmap_set_pattern(unsigned int *map, int map_len, int index, unsigned int pattern, int pattern_len);
int bitmap_extract_pattern(unsigned int *map, int map_len, int heap_break, pattern_t* ptn);




#line 26 "../include/winix/kernel.h"
#line 1 "../include/winix/mm.h"



#line 1 "../include/winix/gfp.h"








#line 5 "../include/winix/mm.h"

int get_free_pages(int num, int flags);
int get_free_page(int flags);
void free_page(void* ptr);
void print_mem_map(int i);


void init_mem_table();

extern unsigned int mem_map[32];

















#line 27 "../include/winix/kernel.h"
#line 1 "../include/winix/sys_stdio.h"




int kputc(const int c);
int kgetc();
int kprintf(const char *format, ...);



#line 28 "../include/winix/kernel.h"
#line 1 "../include/winix/wini_ipc.h"





#line 15 "../include/winix/wini_ipc.h"
int wini_send(int dest, message_t *m);


#line 27 "../include/winix/wini_ipc.h"
int wini_notify(int dest, message_t *m);


#line 37 "../include/winix/wini_ipc.h"
int wini_receive(message_t *m);



#line 29 "../include/winix/kernel.h"
#line 1 "../include/winix/timer.h"



typedef void (*timerhandler_t)(pid_t,clock_t);



typedef struct timer{
	pid_t pid;
	clock_t time_out;
	struct timer *next;
	timerhandler_t handler;
	int flags;
}timer_t;

extern clock_t next_timeout;

void insert_timer(timer_t *timer);
timer_t* dequeue_alarm();
void remove_timer(timer_t *timer);




#line 30 "../include/winix/kernel.h"
#line 1 "../include/winix/proc.h"

#line 8 "../include/winix/proc.h"




#line 1 "../include/winix/kwramp.h"

#line 7 "../include/winix/kwramp.h"







#line 19 "../include/winix/kwramp.h"
void wramp_set_handler(void (*handler)(int estat));


#line 27 "../include/winix/kwramp.h"
void wramp_load_context();


#line 13 "../include/winix/proc.h"






































#line 53 "../include/winix/proc.h"
typedef enum { DEAD, INITIALISING, RUNNABLE, ZOMBIE } proc_state_t;


#line 61 "../include/winix/proc.h"
typedef struct proc {

	reg_t regs[13];
	reg_t *sp;
	reg_t *ra;
	void (*pc)();
	reg_t *rbase;
	reg_t *ptable;
	reg_t cctrl;


	message_t *message;
	int flags;


	ptr_t heap_break;
	size_t length;


	reg_t protection_table[32];


	struct proc *sender_q;
	struct proc *next_sender;


	struct proc *next;
	int priority;
	int quantum;
	int ticks_left;


	int time_used;


	char name[20];
	proc_state_t state;
	int exit_status;
	int sig_status;
	pid_t pid;
	pid_t procgrp;
	pid_t wpid;
	int parent;


	int proc_index;
	int IN_USE;


	sigset_t pending_sigs;
	struct sigaction sig_table[17];


	timer_t alarm;
} proc_t;




extern proc_t proc_table[13];
extern proc_t *ready_q[5][2];
extern proc_t *block_q[2];


void enqueue_tail(proc_t **q, proc_t *proc);
void enqueue_head(proc_t **q, proc_t *proc);
proc_t *dequeue(proc_t **q);

#line 131 "../include/winix/proc.h"
void init_proc();
void proc_set_default(proc_t *p);

#line 136 "../include/winix/proc.h"
proc_t *new_proc(void (*entry)(), int priority, const char *name);
proc_t *get_free_proc();
void add_to_scheduling_queue(proc_t* p);

#line 142 "../include/winix/proc.h"
void sched();


#line 150 "../include/winix/proc.h"
void end_process(proc_t *p);


#line 160 "../include/winix/proc.h"
proc_t *get_proc(int proc_nr);
proc_t *get_runproc(int proc_nr);






proc_t *kexecp(proc_t *p,void (*entry)(), int priority, const char *name);
proc_t *start_system(void (*entry)(), int priority, const char *name);
proc_t* start_init(size_t *lines, size_t length, size_t entry);


void process_overview();
void printProceInfo(proc_t* curr);
char* getStateName(proc_state_t state);
proc_t *pick_proc();



#line 182 "../include/winix/proc.h"
extern proc_t *current_proc;



#line 31 "../include/winix/kernel.h"

#line 1 "../include/winix/syscall_ctx.h"



#line 1 "../include/ucontext.h"



#line 1 "../include/sys/types.h"

















#line 5 "../include/ucontext.h"







typedef struct _mcontext_t{
	unsigned long regs[13];
	unsigned long *sp;
	void *ra;
	void (*pc)();
	void *rbase;
	unsigned long *ptable;
	unsigned long cctrl;



}mcontext_t;






typedef struct {
   void  *ss_sp;
   int    ss_flags;
   size_t ss_size;
} stack_t;

typedef struct _ucontext_t{


	unsigned long regs[13];
	unsigned long *sp;
	void *ra;
	void (*pc)();


	unsigned long  *ss_sp;
	int    ss_flags;
	size_t ss_size;

	struct _ucontext_t *uc_link;
}ucontext_t;

void _ctx_start();
int  getcontext(ucontext_t *);
int  setcontext(const ucontext_t *);
void makecontext(ucontext_t *, void (* func)(), int argc, ...);
int  swapcontext(ucontext_t *, const ucontext_t *);


#line 5 "../include/winix/syscall_ctx.h"

typedef struct {
    message_t m;
    proc_t *who;
    ucontext_t ctx;
    int interruptted;
}syscallctx_t;



#line 33 "../include/winix/kernel.h"


#line 2 "bitmap.c"

unsigned int mask[32];

void init_bitmap(){
	register int i;
	mask[32 -1] = 1;
    for(i= 32 -2;i>=0;i--){
        mask[i] = mask[i+1] << 1;
    }
}

void bitmap_clear(unsigned int *map, int map_len){
	register int i;
	for (i=0; i < map_len; ++i)
	{
		map[i] = 0;
	}
}

void bitmap_fill(unsigned int *map, int map_len){
	register int i;
	for (i=0; i < map_len; ++i)
	{
		map[i] = 0xffffffff;
	}
}

#line 36 "bitmap.c"
int bitmap_search_from(unsigned int *map, int map_len, int start, int num){
	register int i,j;
	int count = 0;

	if(num >= map_len * 32 || start >= map_len * 32)
        return -1;

	i = start / 32;
	j = start % 32;

	for (; i < map_len; ++i){
		for (; j< 32; j++) {
            if ((map[i] & mask[j]) == 0) {
                count++;
                if (count == num) {
                    return (i*32 + j - count+1);
                }
            }else{
                count = 0;
            }
        }
        j=0;
	}
	return -1;
}

int bitmap_search(unsigned int *map, int map_len, int num){
	return bitmap_search_from(map,map_len,0,num);
}

int bitmap_search_reverse(unsigned int *map, int map_len, int num){
	register int i,j;
	int count = 0;

	if(num >= map_len * 32 )
        return -1;

	for (i = map_len -1; i >= 0; i--){
		for (j = 32 -1; j >= 0; j--) {
            if ((map[i] & mask[j]) == 0) {
                count++;
                if (count == num) {
                    return (i*32 + j - count+1);
                }
            }else{
                count = 0;
            }
        }
	}
	return -1;
}

void bitmap_set_bit(unsigned int *map, int map_len,int start){
	int ibit = start/32;
	if(start >= map_len * 32)	return;
    map[ibit] = map[ibit] | mask[start%32];
}


void bitmap_set_nbits(unsigned int *map, int map_len,int start, int len){
	register int i;
	int inum;
	if(start + len >= map_len * 32)	return;
	for(i=0 ; i<len ; i++){
		inum = start + i;
		map[inum/32] = map[inum/32] | mask[inum%32];
	}
}

void bitmap_reset_nbits(unsigned int *map, int map_len,int start, int len){
	register int i;
	int inum;
	if(start + len >= map_len * 32)	return;
	for(i=0 ; i<len ; i++){
		inum = start + i;
		map[inum/32] = map[inum/32] & (~mask[inum%32]);
	}
}


void bitmap_reset_bit(unsigned int *map, int map_len,int start){
	int ibit = start/32;
	if(start >= map_len * 32)	return;
    map[ibit] = map[ibit] & (~mask[start%32]);
}

int search_backtrace(unsigned int *map, int region_len,unsigned int pattern, int pattern_len,int j){
    int i=0;
    int count = 1;
    int j_bak = j;
	unsigned int map_bit, pattern_bit;
	int result;
    unsigned int curr_pattern = pattern >> (j-1);
    for(;i<region_len;i++){
        for(;j<32;j++){
			map_bit = map[i] & mask[j];
			pattern_bit = curr_pattern & mask[j];
            result = map_bit & pattern_bit;

            if(result == 0){
                count++;
                if(count == pattern_len){
                    return -1;
                }
            }else{
                return 0;
            }
        }
        j=0;
        curr_pattern = pattern << count;
    }
    return 0;
}

int bitmap_search_pattern(unsigned int *map, int map_len,int start, unsigned int pattern, int pattern_len){
    int i=0, j = 0;
    unsigned int map_bit, pattern_bit;
	int result;
    for(i=0;i<map_len;i++){
        for(j=0;j<32;j++){
			map_bit = (map[i] & mask[j]);
			pattern_bit = (pattern >> j) & mask[j];
            result = map_bit & pattern_bit;

            if(result == 0){
                if(pattern_len == 1)
                    return i*32+j;
                if(search_backtrace(map+i,map_len - i, pattern,pattern_len, j+1)){
                    return i*32 + j;
                }
            }
        }
    }
    return 0;
}

unsigned int createMask(unsigned int a, unsigned int b)
{
   unsigned int r = 0;
   unsigned int i;
   for (i=a; i<=b; i++)
       r |= (0x80000000 >> i);

   return r;
}

int bitmap_extract_pattern(unsigned int *map, int map_len, int heap_break, pattern_t *p){
    int i,j,start = 0;
    unsigned int result = 0;
    int end = ((((((heap_break)-1)>>10)<<10)+1024) / 1024);
    int endi = end/32;
    unsigned int tmask;
    for(i=0;i < map_len;i++){
        for(j=0; j< 32; j++){
            if((map[i] & mask[j]) == mask[j]){
                start = i*32 + j;
                kprintf(" i %d j %d\n",i,j);
                goto then;
            }
        }
    }

    then:
    if(end - start > 32 || (i==31 && j==31)){
        return -1;
    }
    result = map[i] << (j);
    if(i < map_len && i != endi){
        tmask = createMask(0,end%32);
        result |= (map[i+1] & tmask) >> (32 - j);
    }
    kprintf(" start %d end %d\n",start, end);
    p->pattern = result;
    p->size = end - start +1;
    return 0;
}

void bitmap_set_pattern(unsigned int *map, int map_len, int index, unsigned int pattern, int pattern_len){
    int i= index/32, j=index%32;
    map[i] |= (pattern >> j);
    if(i < map_len -1 && 32 - j < pattern_len){
        map[i+1] |= (pattern << (32 - j));
    }
}


void bitmap_xor(unsigned int *map1, unsigned int *map2, int map_len){
    int i=0;
    for(i = 0; i< map_len; i++){
        map1[i] ^= map2[i];
    }
}
